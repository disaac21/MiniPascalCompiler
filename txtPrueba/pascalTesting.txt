program RandomExample;

var
  a, b, c: integer;

begin
  a := 5;
  b := 10;
  c := a + b;

  if c > 10 then
    writeln('The sum is greater than 10')
  else
    writeln('The sum is 10 or less');
end.

--------------------------------------------------------

program ConstStrExample;

{ya no falla el const}
const
    Greeting = 'Hello, Mini-Pascal!';

begin
    writeln(Greeting);
end.

-------------------------------------------------------

{ This is a comment }
program HelloWorld;

{el : despues de msg falla, creo que eso si deberia de fallar}
const
    msg: string = 'Hello, world!';
begin
    write(msg);
end.

-----------------------------------------------------------

program ConstStrExample;

{el Greeting falla, porque lleva un const conststr y ese no esta definido}
const
    conststr Greeting = 'Hello, Mini-Pascal!';

begin
    writeln(Greeting);
end.

-------------------------------------------------------

{ This is a comment }
program HelloWorld;
var
    msg: string;
begin
    msg := 'Hello, world!';
    write(msg);
end.

--------------------------------------------------------

program FactorialExample;

function Factorial(x: integer): integer;
begin
  if x <= 1 then
    Factorial := 1
  else
    Factorial := x * Factorial(x - 1);
end;

var
  n: integer;

begin
  n := 5;  { You can change this value to calculate the factorial of a different number }
  writeln('Factorial of ', n, ' is: ', Factorial(n));
  { falla el parentesis del param del Factorial }
end.

---------------------------------------------------------

program ForToExample;

var
  i: integer;

begin
  for i := 1 to 5 do
  begin
    writeln('Value of i: ', i);
  end;
end.

-------------------------------------------------------

program ForDowntoExample;

var
  i: integer;

begin
  for i := 5 downto 1 do
  begin
    writeln('Value of i: ', i);
  end;
end.


------------------------------------------------------

program SumArrayFunctionExample;

{ Declaración de la función }
function SumArray(arr: array of Integer): Integer; {ya no falla con el array "of" integer}
var
  i, sum: Integer;
begin
  sum := 0;

  { Sumar todos los elementos del array }
  for i := 0 to High(arr) do
    sum := sum + arr[i];

  SumArray := sum;
end;

var
  numbers: array[1..5] of Integer = (10, 20, 30, 40, 50); {ya no falla en la asignacion de los valores del array}
  letters: array[1..5] of char = ('a', 'b', 'c', 'c', 'd');
  boolArray: array[1..3] of boolean = (true, false, true);
  total: Integer;
begin
  total := SumArray(numbers);

  WriteLn('The sum of the array elements is: ', total);
end.

-------------------------------------------------------

program ArrayOfArraysExample;

var
  Matrix: array[1..3, 1..3] of Integer;  { Corrected array definition }
  i, j: Integer;

begin
  { Initialize the matrix with values }
  for i := 1 to 3 do
    for j := 1 to 3 do
      Matrix[i, j] := i * j;  { Corrected array indexing }

  { Print the matrix }
  for i := 1 to 3 do
  begin
    for j := 1 to 3 do
      Write(Matrix[i, j]);  { Use Write instead of Writeln to print values on the same line }
    Writeln();  { Move to the next line after printing a row }
  end;
end.

-------------------------------------------------------

program EjemploVariablesYConstantes;

{ Este programa muestra cómo definir variables de diferentes tipos en Pascal
  y cómo utilizar constantes de caracteres y cadenas de texto. }

{ Constantes de tipo char y string }
const
  SALUDO = 'Hola, Mundo!';  { Constante de tipo string }
  INICIAL = 'A';            { Constante de tipo char }

var
  { Variables de tipo básico }
  numero: integer;          { Variable de tipo integer }
  letra: char;              { Variable de tipo char }
  nombre: string;           { Variable de tipo string }
  esValido: boolean;        { Variable de tipo boolean }

  { Arreglos de una dimensión }
  numeros: array[1..5] of integer;  { Arreglo de enteros de una dimensión }
  letras: array[1..3] of char;      { Arreglo de caracteres de una dimensión }
  estados: array[1..4] of boolean;  { Arreglo de booleanos de una dimensión }

  { Arreglos de dos dimensiones }
  matrizNumeros: array[1..3, 1..3] of integer;  { Arreglo de enteros de dos dimensiones }
  matrizLetras: array[1..2, 1..2] of char;      { Arreglo de caracteres de dos dimensiones }
  matrizEstados: array[1..2, 1..2] of boolean;  { Arreglo de booleanos de dos dimensiones }

begin
  { Asignación de valores a variables }
  numero := 10;
  letra := 'B';
  nombre := 'Juan';
  esValido := true;

  { Asignación de valores a arreglos de una dimensión }
  numeros[1] := 1;
  numeros[2] := 2;
  numeros[3] := 3;
  numeros[4] := 4;
  numeros[5] := 5;

  letras[1] := 'X';
  letras[2] := 'Y';
  letras[3] := 'Z';

  estados[1] := true;
  estados[2] := false;
  estados[3] := true;
  estados[4] := false;

  { Asignación de valores a arreglos de dos dimensiones }
  matrizNumeros[1, 1] := 1;
  matrizNumeros[1, 2] := 2;
  matrizNumeros[1, 3] := 3;
  matrizNumeros[2, 1] := 4;
  matrizNumeros[2, 2] := 5;
  matrizNumeros[2, 3] := 6;
  matrizNumeros[3, 1] := 7;
  matrizNumeros[3, 2] := 8;
  matrizNumeros[3, 3] := 9;

  matrizLetras[1, 1] := 'A';
  matrizLetras[1, 2] := 'B';
  matrizLetras[2, 1] := 'C';
  matrizLetras[2, 2] := 'D';

  matrizEstados[1, 1] := true;
  matrizEstados[1, 2] := false;
  matrizEstados[2, 1] := false;
  matrizEstados[2, 2] := true;

  { Ejemplo de uso de las constantes }
  writeln(SALUDO);         { Imprime 'Hola, Mundo!' }
  writeln('La inicial es: ', INICIAL);  { Imprime 'La inicial es: A' }
end.

-------------------------------------------------------

program InlineReadWrite;

{ Este programa realiza la lectura y escritura de variables inline
  utilizando directamente variables de tipo integer, char y string. }

var
  numero: integer;
  letra: char;
  nombre: string;

begin
  { Lectura de valores }
  writeln('Ingrese un número: ');
  readln(numero);

  writeln('Ingrese una letra: ');
  readln(letra);

  writeln('Ingrese su nombre: ');
  readln(nombre);

  { Escritura de valores }
  writeln('El número ingresado es: ', numero);
  writeln('La letra ingresada es: ', letra);
  writeln('El nombre ingresado es: ', nombre);
end.

-------------------------------------------------------

program EvaluacionAritmetica;

{ Este programa evalúa una expresión aritmética simple respetando la precedencia
  de operadores, que sigue las reglas estándar: *, / tienen mayor precedencia que +, -. }

var
  a, b, c, d, resultado: real;

begin
  { Asignamos valores a las variables }
  a := 10;
  b := 5;
  c := 2;
  d := 8;

  { Evaluamos una expresión aritmética compleja }
  resultado := a + b * c - d / c;

  { Mostramos la expresión y el resultado }
  writeln('La expresión evaluada es: ', a, ' + ', b, ' * ', c, ' - ', d, ' / ', c);
  writeln('El resultado es: ', resultado);
end.

-------------------------------------------------------

program FuncionesGenericas;

{ Este programa define funciones que pueden recibir y retornar diferentes tipos
  de datos y manejar parámetros por valor o por referencia. }

{ Función que suma dos enteros }
function Sumar(a, b: integer): integer;
begin
  Sumar := a + b;
end;

{ Función que concatena dos cadenas }
function Concatenar(cadena1, cadena2: string): string;
begin
  Concatenar := cadena1 + cadena2;
end;

{ Función que intercambia dos enteros utilizando parámetros por referencia }
procedure Intercambiar(var x, y: integer);
var
  temp: integer;
begin
  temp := x;
  x := y;
  y := temp;
end;

{ Función que verifica si un carácter es vocal (retorna un booleano) }
function EsVocal(c: char): boolean;
begin
  c := upcase(c);  { Convertir a mayúscula para simplificar la comparación }
  EsVocal := (c = 'A') or (c = 'E') or (c = 'I') or (c = 'O') or (c = 'U');
end;

{ Función que calcula la suma de un arreglo de enteros }
function SumaArreglo(arr: array of integer): integer;
var
  i, suma: integer;
begin
  suma := 0;
  for i := 0 to high(arr) do
    suma := suma + arr[i];
  SumaArreglo := suma;
end;

var
  num1, num2, suma: integer;
  cadena1, cadena2, cadenaResultado: string;
  es_vocal: boolean;
  arreglo: array[0..4] of integer = (1, 2, 3, 4, 5);

begin
  { Uso de la función Sumar }
  num1 := 10;
  num2 := 20;
  suma := Sumar(num1, num2);
  writeln('La suma de ', num1, ' y ', num2, ' es: ', suma);

  { Uso de la función Concatenar }
  cadena1 := 'Hola';
  cadena2 := ' Mundo';
  cadenaResultado := Concatenar(cadena1, cadena2);
  writeln('La concatenación de "', cadena1, '" y "', cadena2, '" es: "', cadenaResultado, '"');

  { Uso de la función Intercambiar }
  writeln('Antes de intercambiar: num1 = ', num1, ', num2 = ', num2);
  Intercambiar(num1, num2);
  writeln('Después de intercambiar: num1 = ', num1, ', num2 = ', num2);

  { Uso de la función EsVocal }
  es_vocal := EsVocal('a');
  writeln('¿"a" es una vocal? ', es_vocal);

  { Uso de la función SumaArreglo }
  suma := SumaArreglo(arreglo);
  writeln('La suma de los elementos del arreglo es: ', suma);
end.

-------------------------------------------------------

program FactorialRecursivo;

{ Este programa calcula el factorial de un número utilizando una función recursiva. }

{ Función recursiva para calcular el factorial de un número }
function Factorial(n: integer): integer;
begin
  if n = 0 then
    Factorial := 1
  else
    Factorial := n * Factorial(n - 1);
end;

var
  numero, resultado: integer;

begin
  { Leer el número del usuario }
  writeln('Ingrese un número para calcular su factorial: ');
  readln(numero);

  { Calcular el factorial utilizando la función recursiva }
  resultado := Factorial(numero);

  { Mostrar el resultado }
  writeln('El factorial de ', numero, ' es: ', resultado);
end.

-------------------------------------------------------

program MaximoComunDivisor;

{ Este programa calcula el máximo común divisor (MCD) de dos números utilizando
  el algoritmo de Euclides. El cálculo se realiza en un procedimiento anidado
  y recursivo. }

var
  a, b: integer;

begin
  { Cuerpo principal (main) del programa }
  writeln('Ingrese el primer número: ');
  readln(a);
  writeln('Ingrese el segundo número: ');
  readln(b);

  { Procedimiento anidado para calcular el MCD }
  procedure CalcularMCD(x, y: integer);
  var
    resultado: integer;

    { Procedimiento recursivo para el algoritmo de Euclides }
    function Euclides(m, n: integer): integer;
    begin
      if n = 0 then
        Euclides := m
      else
        Euclides := Euclides(n, m mod n);
    end;

  begin
    resultado := Euclides(x, y);
    writeln('El MCD de ', x, ' y ', y, ' es: ', resultado);
  end;

  { Llamada al procedimiento anidado para calcular el MCD }
  CalcularMCD(a, b);
end.

-------------------------------------------------------

program EstructurasDeControl;

{ Este programa utiliza ciclos while, for, repeat y la instrucción if para
  realizar operaciones sobre una lista de números. }

var
  numeros: array[1..10] of integer;
  i, suma, maximo, minimo: integer;

begin
  { Inicializar variables }
  suma := 0;
  maximo := -32768; { Valor mínimo posible para un entero }
  minimo := 32767;  { Valor máximo posible para un entero }

  { Leer 10 números }
  writeln('Ingrese 10 números enteros:');
  for i := 1 to 10 do
  begin
    write('Número ', i, ': ');
    readln(numeros[i]);
  end;

  { Usar ciclo for para calcular la suma de los números }
  for i := 1 to 10 do
    suma := suma + numeros[i];

  writeln('La suma de los números es: ', suma);

  { Usar ciclo while para encontrar el número máximo }
  i := 1;
  while i <= 10 do
  begin
    if numeros[i] > maximo then
      maximo := numeros[i];
    i := i + 1;
  end;

  writeln('El número máximo es: ', maximo);

  { Usar ciclo repeat para encontrar el número mínimo }
  i := 1;
  repeat
    if numeros[i] < minimo then
      minimo := numeros[i];
    i := i + 1;
  until i > 10;

  writeln('El número mínimo es: ', minimo);

  { Usar la instrucción if para determinar si la suma es par o impar }
  if suma mod 2 = 0 then
    writeln('La suma de los números es par.')
  else
    writeln('La suma de los números es impar.');
end.

-------------------------------------------------------

program OperadoresPascal;

{ Este programa demuestra el uso de operadores de suma, multiplicación y asignación en Pascal. }

var
  a, b, suma, resta, producto, divisionEntera, modulo: integer;
  divisionReal: real;

begin
  { Asignación de valores a las variables }
  a := 15;
  b := 4;

  { Uso de operadores de suma }
  suma := a + b;
  resta := a - b;

  { Uso de operadores de multiplicación }
  producto := a * b;
  divisionEntera := a div b;
  divisionReal := a / b;
  modulo := a mod b;

  { Mostrar los resultados }
  writeln('Operaciones con los números ', a, ' y ', b, ':');
  writeln('Suma (a + b): ', suma);
  writeln('Resta (a - b): ', resta);
  writeln('Producto (a * b): ', producto);
  writeln('División entera (a div b): ', divisionEntera);
  writeln('División real (a / b): ', divisionReal);  { Mostrar con 2 decimales }
  writeln('Módulo (a mod b): ', modulo);
end.


