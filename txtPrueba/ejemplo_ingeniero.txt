program ciclos;

    {declaramos las variables}
    {hola hahhahaa;}
    var lenght,i,j,x,y,cont:Integer;
    arreglo:Array[1..50] of Integer;
    {holsaaaa:COLO;}
    arreglo_bidi: Array[1..10,1..5] of Integer;
    var s:STRING;

    Function d ():Integer;
    Begin
        f := 3;
    end;

    begin
        {iniciamos las variables}

        length:= 50;
        x := 10;
        y := 5;
        cont := 1;

        {llenamos el arreglo bidimensional}
        For i := x Downto 1 Do
        Begin
        For j := y Downto 1 Do
        arreglo_bidi[i,j] := ( cont + ( x - y ) + 5) mod 15;
        End;

        {reiniciamos el contador}
        cont := 4;

        {llenamos el arreglo unidimensional}
        For i := 1 To x Do
        For j := 1 To y Do
        Begin
        arreglo[cont] := arreglo_bidi[i,j];
        cont := ( cont + 1 ) ;
        End;

        {reiniciamos el contador}
        cont := 1;

        {imprimimos el arreglo unidimensional}
        While ( cont <> lenght+1 ) Do
        Begin
        write('arreglo[%d] = ',cont);
        writeln('%d');
        End;
        writeln('Gracias por usar Pascal!');
    end.

    {invalid_keyword;  // This line will cause a NoViableAltException}
    { Esta línea provocará un FailedPredicateException si la predicación semántica falla }
    {if (x < 0) then writeln('Esto provocará un FailedPredicateException');}
    {$invalid_token;  // Esta línea provocará un LexerNoViableAltException}